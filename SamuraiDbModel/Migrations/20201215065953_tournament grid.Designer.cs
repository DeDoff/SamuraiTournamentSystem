// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SamuraiDbModel;

namespace SamuraiDbModel.Migrations
{
    [DbContext(typeof(SamuraiDbContext))]
    [Migration("20201215065953_tournament grid")]
    partial class tournamentgrid
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("SamuraiDbModel.Competition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("SamuraiDbModel.CompetitionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("CompetitionId")
                        .HasColumnType("integer");

                    b.Property<int>("CompositeCategoryId")
                        .HasColumnType("integer");

                    b.Property<int?>("CompositeCategoryId1")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("CompositeCategoryId");

                    b.HasIndex("CompositeCategoryId1");

                    b.ToTable("CompetitionCategories");
                });

            modelBuilder.Entity("SamuraiDbModel.Competitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Age")
                        .HasColumnType("text");

                    b.Property<int?>("CompetitionCategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Level")
                        .HasColumnType("text");

                    b.Property<int?>("MatchId")
                        .HasColumnType("integer");

                    b.Property<int>("SportsmanId")
                        .HasColumnType("integer");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionCategoryId");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("MatchId");

                    b.HasIndex("SportsmanId");

                    b.ToTable("Competitors");
                });

            modelBuilder.Entity("SamuraiDbModel.CompositeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CompositeCategories");
                });

            modelBuilder.Entity("SamuraiDbModel.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<TimeSpan>("MatchDuration")
                        .HasColumnType("interval");

                    b.Property<string>("MatchInfo")
                        .HasColumnType("text");

                    b.Property<int>("MatchTournamentNumber")
                        .HasColumnType("integer");

                    b.Property<int>("TournamentGridId")
                        .HasColumnType("integer");

                    b.Property<int>("WinnerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TournamentGridId");

                    b.HasIndex("WinnerId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("SamuraiDbModel.SportCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("CompositeCategoryId")
                        .HasColumnType("integer");

                    b.Property<bool>("MultipleAttributeSelection")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompositeCategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SportCategories");
                });

            modelBuilder.Entity("SamuraiDbModel.SportCategoryAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("LimitFrom")
                        .HasColumnType("integer");

                    b.Property<int?>("LimitTo")
                        .HasColumnType("integer");

                    b.Property<int?>("SportCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SportCategoryId");

                    b.ToTable("SportCategoryAttributes");
                });

            modelBuilder.Entity("SamuraiDbModel.Sportsman", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Age")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Level")
                        .HasColumnType("text");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Sportsmens");
                });

            modelBuilder.Entity("SamuraiDbModel.TournamentGrid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("CompetitionCategoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionCategoryId")
                        .IsUnique();

                    b.ToTable("TournamentGrids");
                });

            modelBuilder.Entity("SamuraiDbModel.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SamuraiDbModel.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("UserUserRole", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("integer");

                    b.Property<int>("UsersId")
                        .HasColumnType("integer");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UsersAndRoles");
                });

            modelBuilder.Entity("SamuraiDbModel.CompetitionCategory", b =>
                {
                    b.HasOne("SamuraiDbModel.Competition", null)
                        .WithMany("Categories")
                        .HasForeignKey("CompetitionId");

                    b.HasOne("SamuraiDbModel.CompositeCategory", null)
                        .WithMany()
                        .HasForeignKey("CompositeCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SamuraiDbModel.CompositeCategory", "CompositeCategory")
                        .WithMany()
                        .HasForeignKey("CompositeCategoryId1")
                        .HasConstraintName("FK_CompetitionCategories_CompositeCategories_CompositeCategor~1");

                    b.Navigation("CompositeCategory");
                });

            modelBuilder.Entity("SamuraiDbModel.Competitor", b =>
                {
                    b.HasOne("SamuraiDbModel.CompetitionCategory", "CompetitionCategory")
                        .WithMany("Competitors")
                        .HasForeignKey("CompetitionCategoryId");

                    b.HasOne("SamuraiDbModel.Competition", "Competition")
                        .WithMany()
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SamuraiDbModel.Match", null)
                        .WithMany("Competitors")
                        .HasForeignKey("MatchId");

                    b.HasOne("SamuraiDbModel.Sportsman", "Sportsman")
                        .WithMany()
                        .HasForeignKey("SportsmanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");

                    b.Navigation("CompetitionCategory");

                    b.Navigation("Sportsman");
                });

            modelBuilder.Entity("SamuraiDbModel.Match", b =>
                {
                    b.HasOne("SamuraiDbModel.TournamentGrid", "TournamentGrid")
                        .WithMany("Matches")
                        .HasForeignKey("TournamentGridId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SamuraiDbModel.Competitor", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TournamentGrid");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("SamuraiDbModel.SportCategory", b =>
                {
                    b.HasOne("SamuraiDbModel.CompositeCategory", null)
                        .WithMany("Categories")
                        .HasForeignKey("CompositeCategoryId");
                });

            modelBuilder.Entity("SamuraiDbModel.SportCategoryAttribute", b =>
                {
                    b.HasOne("SamuraiDbModel.SportCategory", null)
                        .WithMany("Attributes")
                        .HasForeignKey("SportCategoryId");
                });

            modelBuilder.Entity("SamuraiDbModel.TournamentGrid", b =>
                {
                    b.HasOne("SamuraiDbModel.CompetitionCategory", "CompetitionCategory")
                        .WithOne("TournamentGrid")
                        .HasForeignKey("SamuraiDbModel.TournamentGrid", "CompetitionCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompetitionCategory");
                });

            modelBuilder.Entity("UserUserRole", b =>
                {
                    b.HasOne("SamuraiDbModel.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SamuraiDbModel.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SamuraiDbModel.Competition", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("SamuraiDbModel.CompetitionCategory", b =>
                {
                    b.Navigation("Competitors");

                    b.Navigation("TournamentGrid");
                });

            modelBuilder.Entity("SamuraiDbModel.CompositeCategory", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("SamuraiDbModel.Match", b =>
                {
                    b.Navigation("Competitors");
                });

            modelBuilder.Entity("SamuraiDbModel.SportCategory", b =>
                {
                    b.Navigation("Attributes");
                });

            modelBuilder.Entity("SamuraiDbModel.TournamentGrid", b =>
                {
                    b.Navigation("Matches");
                });
#pragma warning restore 612, 618
        }
    }
}
